###############################################
# FILE: funcs
# SUBJ: comment
# AUTH: Your Name
# CREATED: 2022-8-9 16:57:7
# MODIFIED:
###############################################

@DECL

# palavra com letras repetidas
LetrasRep(L("palavra"),L("letras")){
	L("comp_plv") = strlength(L("palavra"));
	L("comp_ltr") = strlength(L("letras"));
	if(strequalnocase(strchar(L("palavra"), 0),strchar(L("letras"), 0))){
		L("c") = 1;
		while(L("c")<L("comp_plv")){
			while(L("j")<L("comp_ltr")-1){
				if(strequalnocase(strchar(L("palavra"), L("c")-1),strchar(L("letras"), L("j")))){
					if(strnotequalnocase(strchar(L("palavra"), L("c")),strchar(L("letras"), L("j")))){
						if(strnotequalnocase(strchar(L("palavra"), L("c")),strchar(L("letras"), L("j")+1))){
							return 0;
						}
					}
				}
				L("j")++;
			}
			if(strequalnocase(strchar(L("palavra"), L("c")-1),strchar(L("letras"), L("comp_ltr")))){
				if(strnotequalnocase(strchar(L("palavra"), L("c")),strchar(L("letras"), L("comp_ltr")))){
					return 0;
				}
			}
			L("c")++;
		}
		return 1;
	}
	return 0;
}

# ordem aleatoria de letras
AleRep(L("palavra"),L("letras")){
	L("comp") = strlength(L("palavra"));
	L("comp2") = strlength(L("letras"));
	while(L("c")<L("comp")){
		L("check") = 0;
		L("i") = 0;
		while(L("i")<L("comp2") && L("check")==0){
			if(strequalnocase(strchar(L("palavra"), L("c")),strchar(L("letras"), L("i")))){
				L("check") = 1;
			}
			L("i")++;
		}
		if(L("check")==0){
			return 0;
		}
		L("c")++;
	}
	return 1;
}

# 2 letras em ordem repetidas
OrdRep(L("palavra"),L("trecho")){
	L("comp") = strlength(L("palavra"));
	L("comp2") = strlength(L("trecho"));
	while(L("i")<L("comp2")){
		if(strequalnocase(strchar(L("palavra"), 0),strchar(L("trecho"), L("i")))){
			L("1letra") = 1;
		}
		L("i")++;
	}
	if(L("1letra") == 1){
		L("c") = 1;
		while(L("c")<L("comp")){
			L("i") = 0;
			while(L("i")<L("comp2")-1){
				if(strequalnocase(strchar(L("palavra"), L("c")-1),strchar(L("trecho"), L("i")))){
					if(strnotequalnocase(strchar(L("palavra"), L("c")),strchar(L("trecho"), L("i")+1))){
						return 0;
					}
				}
				L("i")++;
			}
			if(strequalnocase(strchar(L("palavra"), L("c")-1),strchar(L("trecho"), L("comp2")-1))){
				if(strnotequalnocase(strchar(L("palavra"), L("c")),strchar(L("trecho"), 0))){
					return 0;
				}
			}
			L("c")++;
		}
		return 1;
	}
	return 0;
}

AddEmotion(L("node")){
	L("emocao") = pnvar(L("node"),"emocao");
	L("con") = AddUniqueCon(G("emocao"),L("emocao"));
	IncrementCount(L("con"),"contagem");
}

#AddEmotionTeste(L("node")){
#	L("emocao") = pnvar(L("node"),"emocao");
#	L("intensidade") = pnvar(L("node"),"intensidade");
#	L("con") = AddUniqueConVal(G("emocao"),L("emocao"),L("intensidade"));
#	IncrementCount(L("con"),"intensidade");
#}

ZeroEmotion() {
	L("con") = down(G("emocao"));
	while (L("con")) {
		replaceval(L("con"),"contagem",0);
		L("con") = next(L("con"));
	}
	return 1;
}

#AddEmotion1(L("node")){
#	L("engracado") = pnvar(L("node"),"engracado");
#	L("eng") = AddUniqueCon(G("engracado"),L("engracado"));
#	IncrementCount(L("eng"),"engracado");
#	L("felicidade") = pnvar(L("node"),"felicidade");
#	L("fel") = AddUniqueCon(G("felicidade"),L("felicidade"));
#	IncrementCount(L("fel"),"felicidade");
#}

@@DECL
